# MDR-NON-PROD Web Deployment

parameters:
  websiteName: ''
  variables: ''

jobs:
  - job: 
    displayName: 'Create SSL certificate ${{ parameters.websiteName }}' 
    # continueOnError: 
    workspace:
      clean: all
    variables:
      - template: ../variables/${{ parameters.variables }}
        parameters:
          websiteName: ${{ parameters.websiteName }}
  
    steps:
      - checkout: self
      
      - task: AzurePowerShell@5
        name: CheckCertExists
        displayName: 'Check if certificate exists in Key Vault'
        inputs:
          azureSubscription: '${{ variables.azureSubscription }}'
          ScriptType: 'FilePath'
          azurePowerShellVersion: 'LatestVersion'
          pwsh: true
          ScriptPath: '$(System.DefaultWorkingDirectory)/templates/scripts/CheckCertExists.ps1'
          ScriptArguments: >
            -websiteName ${{ parameters.websiteName }}
            -KeyVaultName ${{ variables.KeyVaultName }}
     
      - task: AzureKeyVault@2
        displayName: 'Get Ansible Tower credentials'
        condition: eq(variables['certExists'], 'false') 
        inputs:
          azureSubscription: '${{ variables.azureSubscription }}'
          KeyVaultName: '${{ variables.KeyVaultName }}'
          SecretsFilter: 'AnsibleTowerSP-User,AnsibleTowerSP-Password'
          RunAsPreJob: false

      - task: AzurePowerShell@5
        displayName: 'Create SSL certificate using Building Block'
        condition: eq(variables['certExists'], 'false') 
        inputs:
          azureSubscription: '${{ variables.azureSubscription }}'
          ScriptType: 'InlineScript'
          azurePowerShellVersion: 'LatestVersion'
          pwsh: true
          Inline: |
            
            # Define the Tower credentials and API URL
            #$uname = $(AnsibleTowerSP-User)
            #$passwd = $(AnsibleTowerSP-Password)
            $TowerApiUrl = "https://tower.000ukso.sbp.eyclienthub.com:443/api/v2"

            # Set the TLS version to ensure secure communication
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

            # Create a base64-encoded authorization 
            $credPair = "$('$(AnsibleTowerSP-User)'):$('$(AnsibleTowerSP-Password)')"
            $Authorization = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credPair))

            # Define the URI to fetch user information
            $MeUri = $TowerApiUrl + '/me/'
            $MeResult = Invoke-RestMethod -Uri $MeUri -Headers @{ "Authorization" = "Basic $Authorization" ; "Content-Type" = 'application/json'} -ErrorAction Stop -TimeoutSec 180

            # Obtain a personal access token (PAT) for the user
            $PATUri = $TowerApiUrl + '/users/' + $($MeResult.Results.id) + '/personal_tokens/'
            $Tokens = Invoke-RestMethod -Uri $PATUri -Method POST -Headers @{ "Authorization" = "Basic $Authorization" ; "Content-Type" = 'application/json'} -ContentType "application/json"
            $Tokens

            # Create headers with the PAT for subsequent API requests
            $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
            $headers.Add("Content-Type", "application/json")
            $tokenId = $Tokens.id
            $headers.Add("Authorization", "Bearer " + $Tokens.token);

            # Define the credentials for SSL
            $ansiblecredentials = @(4968,771,1334,1639,4)

            # Set the template number for the job to launch (Development or Production)
            $templateNumber = 3494
            # Define parameters for the job to launch
            
                $bodyParameters = @{
                    credentials = $ansiblecredentials #Call to Ansible Job Creadentials
                    extra_vars = @{
                        var_certificate_name = '${{ parameters.websiteName }}'
                        var_request_type = "create"
                        var_provisioning_model = '${{ variables.provisioningModel }}'
                        var_certificate_authority = "1"
                        var_smu_chargecode = '${{ variables.smuChargeCode }}' 
                        var_project_chargecode = '${{ variables.projectChargeCode }}' 
                        var_certificate_owner = '${{ variables.certificateOwner }}' 
                        var_application_contact = '${{ variables.applicationContact }}' 
                        var_domain_name = '${{ variables.domainName }}' 
                        var_expiration_period = "12"
                        var_subject_altname = @()
                        var_device_input = @(
                            @{
                                PlatformType = '${{ variables.platformType }}' 
                                DeviceName = '${{ variables.deviceName }}' 
                                ApplicationInput = @(
                                    @{
                                        TenantName = "eygs.onmicrosoft.com"
                                        PasswordRequired = "1"
                                    }
                                )
                            }
                        )
                        var_schedule_request = @()
                    }
                }

            $bodyParametersJson = $bodyParameters | ConvertTo-Json -Depth 10

            # Launch the job using the specified template number and parameters
            $urlTemplate = $TowerApiUrl + "/job_templates/" + $templateNumber + "/launch/";
            $ansibleResponse = Invoke-RestMethod -Uri $urlTemplate -Method Post -Body $bodyParametersJson -Headers $headers
            $ansibleResponse.id

            # Specify the jobId of the triggered job associated to the DNS job launched
            $jobId= $ansibleResponse.id

            # Get the status of the launched job
            $urlTemplate = $TowerApiUrl + "/jobs/$($ansibleResponse.id)/";
            $ansibleResponse = Invoke-RestMethod -Uri $urlTemplate -Method Get -Headers $headers
            $ansibleResponse.status

            $x= $ansibleResponse.status
            do {
                cls
                sleep 20
                $ansibleResponse = Invoke-RestMethod -Uri $urlTemplate -Method Get -Headers $headers
                $ansibleResponse.status
                $x= $ansibleResponse.status
              }
            while ($x -eq "running")

            if ($x -eq "failed") {
            Write-Host "##[error]Job FAILED. Job details: $urlTemplate"
            } else {
            Write-Host "##[section]Job SUCCESSFUL. Job details: $urlTemplate"
            }

            # Get the job's standard output (stdout)
            #$urlTemplate = $TowerApiUrl + "/jobs/$jobId/stdout/?format=txt";
            #$ansibleResponse = Invoke-RestMethod -Uri $urlTemplate -Method Get -Headers $headers -TimeoutSec 200
            #$ansibleResponse
            # Delete the personal access token to clean up after the job
            $TokenDeleteUri = "$TowerApiUrl/tokens/$tokenId/"
            $DeleteResult = Invoke-RestMethod -Uri $TokenDeleteUri -Method Delete -Headers @{ 'Authorization' = "Basic $Authorization" }

            # Verify the creation of the SSL certificate

            if ($x -eq "successful" -and $action -eq "create") {
                $attempt = 0
                $maxAttempts = 5
                $seconds = 10
                do {
                if (Get-AzKeyVaultCertificate -VaultName '${{ variables.KeyVaultName }}' -Name ${{ variables.certName }}) {
                    Write-Host "Certificate found."
                    break
                } else {
                    cls
                    $attempt++
                    Write-Host "Certificate not found. Retrying... $attempt of $maxAttempts"
                    Start-Sleep $seconds # Wait for a few seconds before the next attempt
                }
                } while ($attempt -lt $maxAttempts)

                if ($attempt -eq $maxAttempts) { Write-Host "Maximum attempts reached. Certificate not found." }
            }
            else {
                Write-Host "Certificate creation failed."
            }